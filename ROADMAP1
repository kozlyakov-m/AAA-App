## План выполнения первого набора требований

0. **Подготовительные шаги**
    1. Включить toggl
    2. Прочитать требования
    3. Создать репозиторий
    4. Создать пустой проект в Idea

1. **Описать тестовые данные - 30 минут**
    1. Описать пользователей  - 15 минут
     
     № | login | pass 
     --- | --- | ---  
     U1 | vasya | 123  
     U2 | admin | admin  
     U3 | q | ?!#  
     U4 | abcdefghij | pass
    
    2. Описать ресурсы  - 15 минут
     
     № | res | role | user
     --- | --- | --- | ---
     R1 | A | READ | vasya
     R2 | A.B.C | WRITE | vasya
     R3 | A.B | EXECUTE | admin
     R4 | A | READ | admin
     R5 | A.B | WRITE | admin
     R6 | A.B.C | READ | admin
     R7 | B | EXECUTE | q
 
2. **Создать скрипты - 60 минут**
    1. Записать тесты в bat/sh файл - 30 минут
     
     № | Входные данные | Ожидаемый результат
      --- | --- | ---
     T1.1 | app.jar | 1 + справка
     T1.2 | app.jar -h | 1 + справка
     T1.3 | app.jar -q | 0 + справка
     Т1.4 | app.jar 12345 | 0 + справка
     T1.5 | app.jar -res A.B 12345 | 0 + справка
     T2.1 | app.jar -login vasya -pass 123 | 0
     T2.2 | app.jar -login VASYA -pass 123 | 2
     T2.3 | app.jar -login asd -pass 123 | 3
     T2.4 | app.jar -login admin -pass 123 | 4
     T3.1 | app.jar -login vasya -pass 123 -res A -role READ | 0
     T3.2 | app.jar -login vasya -pass 123 -res A -role DELETE | 5
     T3.3 | app.jar -login vasya -pass 123 -res A -role WRITE | 6
     T3.4 | app.jar -login vasya -pass 123 -res A.B -role READ | 0
     T3.5 | app.jar -login vasya -pass 0000 -res A.B -role DELETE | 4
     T3.6 | app.jar -login admin -pass admin -res A -role EXECUTE | 6
     T3.7 | app.jar -login admin -pass admin -res A.A -role WRITE | 6
     T4.1 | app.jar -login vasya -pass 123 -res A -role READ -ds 2020-03-10 -de 2020-03-11 -vol 100 | 0
     T4.2 | app.jar -login vasya -pass 123 -res A -role READ -ds 2020.03.10 -de 2020.03.11 -vol 100 | 7
     T4.3 | app.jar -login vasya -pass 123 -res A -role READ -ds 2020-03-10 -de 2020-03-11 -vol aaaa | 7
     T4.4 | app.jar -login vasya -pass 123 -res A -role EXECUTE -ds 01.02.3012 -de 01.02.2030 -vol aaa | 6
     T4.5 | app.jar -login vasya -pass 123 -res A -role READ -ds 2020-03-11 -de 2020-03-10 -vol 100 | 7
     
    2. Создать скрипт компиляции (**R1.12**) - 15 минут
    3. Создать скрипты запуска (**R1.12**) - 15 минут

3. **Простейшие сценарии - 50 минут**
    1. Проверить наличие аргументов (**R1.8**) - 10 минут
    1. Создать `class BusinessLogic` - 10 минут
    2. Создать функцию вывода справки в `BusinessLogic` - 10 минут
    3. Проверить, надо ли выводить справку - 20 минут
       + Если пусто возвращаем 1
       + Если `args[0]=="-h"` возвращаем 1
       + Если неизвестные аргументы возвращаем 0
       + Если неправильное число аргументов возвращаем 0
 
4. **Аутентификация - 105 минут** 
    1. Создать метод надо ли аутентифицировать в `BusinessLogic` - 10 минут
        + (`args[0]=="-login" && args[2]=="-pass"`) (**R1.1**)
    2. Создать метод проверки правильности формата логина в `BusinessLogic` (**R1.1**) - 10 минут
    3. Создать метод проверки существования логина в `BusinessLogic` - 10 минут
         + `login==vasya`
    4. Создать метод проверки пароля в `BusinessLogic` - 10 минут
         + `pass==123`
    5. Создать `data class User` - 10 минут
         + `login`
         + `pass`
    6. Создать коллекцию юзеров с тестовыми данными - 10 минут
    7. Исправляем методы 4.3 и 4.4 на работу с коллекцией юзеров - 10 минут
    8. Создать класс `ArgHandler` - 10 минут
        + `h`
        + `login`
        + `pass`
        + конструктор (`args:Array<String>` )
        + нужна ли справка
        + есть ли аргументы
        + нужна ли аутентификация
    9. Рефакторинг кода, чтобы использовался `ArgHandler` - 20 минут
    10. Дополнить справку - 5 минут
 
 5. **Авторизация - 1	50 минут**
    1. В `ArgHandler` создать метод нужна ли авторизация (**R1.11**) - 10 минут
        + Проверяем наличие обязательных параметров (ресурса и роли)
        + Если не нужна авторизация, то заканчиваем программу с кодом 0  
        Иначе запускаем авторизацию
    2. Создать `data class Permission` - 10 минут
        + `res`
        + `role`
        + `user`
    3. Создать коллекцию ресурсов с тестовыми данными - 10 минут
    4. Создаем список допустимых ролей - 10 минут
    5. ~~Создать метод проверки существования роли в `BusinessLogic` (**R1.5**) - 10 минут~~
    6. Добавляем поля `res` и `role` в `ArgHandler` - 10 минут
    7. ~~Добавляем метод проверки формата ресурса в `BusinessLogic` (**R1.3**) - 10 минут~~
        + ~~Если неверный формат ресурса, заканчиваем выполнение программы с кодом 6
          Иначе продолжаем выполнение программы~~
    8. ~~Добавляем метод поиска ресурса по имени в `BusinessLogic` (**R1.3**) - 10 минут~~
    9. Создать метод проверки доступа в `BusinessLogic` (есть ли у пользователя права на выбранную им роль) (**R1.3**) - 10 минут
        + `user==vasya res==A role==READ`
    10. Переделать метод 5.10 на работу с коллекцией - 10 минут
    11. UPD: Создать метод проверки существования роли в `BusinessLogic` (**R1.5**) - 10 минут
    12. Добавляем метод проверки вложенности ресурса в `BusinessLogic` (используем   
     `substring(0,res.length)`) (**R1.6, R1.4**) - 10 минут
        + (Если ресурс из таблицы является началом требуемого  
        ресурса, предоставить доступ)
    13. Создать метод авторизации в `BusinessLogic` - 10 минут
    14. В метод авторизации добавить вызов метода 5.7, а из него 5.8 - 10 минут
    15. ~~В метод поиска ресурса добавить флаг `доступ получен` (**R1.6**) - 10 минут~~
    16. Дополнить справку - 10 минут
    

6. **Аккаунтинг - 80 минут**
    1. Добавляем поля `ds`, `de`, `vol` в `ArgHandler` - 10 минут
    2. UPD: Создаем метод нужен ли аккаунтинг в `ArgHandler`(**R1.11**) - 10 минут
    3. UPD: Создать класс `Session` - 10 минут
        + `res: Permission` *//ресурс, по которому предоставлен доступ (например, А для А.Б.С)*
        + `ds`
        + `de`
        + `vol`
    4. ~~Создать метод обработки параметров `-ds -de -vol` в `ArgHandler`(**R1.7**) - 10 минут~~
    5. UPD: Создать метод `accounting` в `BusinessLogic`
    6. Создать метод проверки формата `ds` и `de`, `vol` в `BusinessLogic` - 10 минут
        + Если формат неверен, то возвращаем код 7 (**R1.9**)
          Иначе продолжаем выполнение программы
    7. Записываем данные в экземпляр класса `Session` - 10 минут
    8. Добавляем этот объект в коллекцию - 10 минут
    9. Дополняем справку - 10 минут

7. **Беспорядочная обработка аргументов - 80 минут**     
    1. Подключаем библиотеку kotlinx.cli для обработки параметров (**R1.10**) - 60 минут
       параметров командной строки в любом порядке
    2. В классе `ArgHandler` меняем метод последовательной обработки `args` и запуска  
    методов `BusinessLogic` на обработку всех методов и разложение их по полям - 20 минут
    3. Далее меняем логику работы класса

8. **Безопасность - 80 минут** 
    1. ~~Создать `class Safety`(**R1.2**) - 15 минут~~
        + `pass`
        + `const PEPPER`
        + `salt`
    2. Создать метод для шифрования в `Safety` - 40 минут 
    3. ~~Объявить защищенную константу перца - 5 минут~~
    4. Добавить переменную `salt` в `User` - 5 минут
    5. Изменить метод проверки пароля в `BusinessLogic` на проверку   
    хэшей, а не паролей - 10 минут
    6. Изменить название переменной `pass` на `hash` в `User` - 5 минут
	
9. **Таблицы учета времени**

    Пункт плана | Оценка времени
    --- | ---
    **1** | **30 минут**
    1.i | 15 минут
    1.ii | 15 минут
    **2** | **60 минут**
    2.i | 30 минут
    2.ii | 15 минут
    2.iii | 15 минут
    **3** | **50 минут**
    3.i | 10 минут
    3.ii | 10 минут
    3.iii | 10 минут
    3.iv | 20 минут
    **4** | **105 минут**
    4.i | 10 минут
    4.ii | 10 минут
    4.iii | 10 минут
    4.iv | 10 минут
    4.v | 10 минут
    4.vi | 10 минут
    4.vii | 10 минут
    4.viii | 10 минут
    4.ix | 20 минут
    4.x | 5 минут
    **5** | **150 минут**
    5.i | 10 минут
    5.ii | 10 минут
    5.iii | 10 минут
    5.iv | 10 минут
    5.v | 10 минут
    5.vi | 10 минут
    5.vii | 10 минут
    5.viii | 10 минут
    5.ix | 10 минут
    5.x| 10 минут
    5.xi | 10 минут
    5.xii | 10 минут
    5.xiii | 10 минут
    5.xiv | 10 минут
    5.xv | 10 минут
    **6** | **80 минут**
    6.i | 10 минут
    6.ii | 10 минут
    6.iii | 10 минут
    6.iv | 10 минут
    6.v | 10 минут
    6.vi | 10 минут
    6.vii | 10 минут
    6.viii | 10 минут
    **7** | **80 минут**
    7.i | 60 минут
    7.ii | 20 минут
    **8** | **80 минут**
    8.i | 15 минут
    8.ii | 40 минут
    8.iii | 5 минут
    8.iv | 5 минут
    8.v | 10 минут
    8.vi | 5 минут
    **Итого** | **635 минут**
       